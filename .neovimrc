set nocompatible 
set smartindent
filetype off

call plug#begin('~/.vim/plugged')

" make backspace work like other apps
set backspace=2 

" Set up tags
set tags=tags

" Visualize code indentations
Plug 'nathanaelkane/vim-indent-guides'
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=gray

autocmd FileType python setlocal sw=2 sts=2 expandtab

let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1

" Quote / bracket / paren autocomplete
Plug 'Raimondi/delimitMate' 
let delimitMate_expand_cr=1

" Tab to complete text
" Plug 'ervandew/supertab'
" let g:SuperTabDefaultCompletionType = "<c-n>"

" Better motions" 
Plug 'easymotion/vim-easymotion'
" map <leader>m <Plug>(easymotion-prefix)

" Plug 'Valloric/YouCompleteMe'
" let g:ycm_autoclose_preview_window_after_completion = 1

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-json', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-css', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-html', {'do': 'yarn install --frozen-lockfile'}

" let g:coc_global_extensions = [ 'coc-emoji', 'coc-eslint', 'coc-prettier', 'coc-tsserver', 'coc-tslint', 'coc-tslint-plugin', 'coc-css', 'coc-json', 'coc-pyls', 'coc-yaml' ]

Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar'

Plug 'liuchengxu/vista.vim'
let g:vista_default_executive = 'coc'
 
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other Plug.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Jump to definitions, rename, etc...
Plug 'ternjs/tern_for_vim'

" Javascript syntax highlighting
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }

" Javascript syntax highlighting
Plug 'jelera/vim-javascript-syntax'
hi link javaScriptTemplateVar Identifier
hi link javaScriptTemplateString String

" Javascript library syntax highlighting
Plug 'othree/javascript-libraries-syntax.vim'

" highlighting for Pug
Plug 'digitaltoad/vim-pug'

" highlighting for Vue
Plug 'posva/vim-vue'

" Lightline status bar
Plug 'itchyny/lightline.vim'
set laststatus=2

Plug 'majutsushi/tagbar'

let g:lightline = {
\ 'colorscheme': 'wombat',
\ 'active': {
\   'left': [ ['mode', 'paste'], 
\             ['gitbranch', 'filename', 'modified'] ],
\   'right': [ ['lineinfo'], 
\              ['percent'], 
\              ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok'] ]
\ },
\ 'component_function': {
\   'filename': 'LightLineFilename',
\   'gitbranch': 'fugitive#head'
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK'
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error'
\ },
\ }

function! LightLineFilename()
  return expand('%')
endfunction
function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ▲', all_non_errors)
endfunction
function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction
function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

" Update and show lightline but only if it's visible (e.g., not in Goyo)
autocmd User ALELint call s:MaybeUpdateLightline()
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

" Add gutter indicators for lines that have been changed
Plug 'airblade/vim-gitgutter'

" GitGutter update time
set updatetime=500

" GitGutter styling to use · instead of +/-
let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" Integrated Git commands
Plug 'tpope/vim-fugitive'

" Brackets and quotes
Plug 'tpope/vim-surround'

" async liniting
Plug 'w0rp/ale'

let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

" Syntax highlighting for jsx
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0

" Auto align text
Plug 'godlygeek/tabular'

" Markdown syntax highlighting
Plug 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled = 1

" Display & browse file tree
Plug 'scrooloose/nerdtree'
let NERDTreeShowHidden=1

set wildignore+=node_modules

" Fuzzy find files
Plug 'junegunn/fzf'
let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'

let g:fzf_tags_command = 'ctags -R'

" Search file text
Plug 'mileszs/ack.vim'
let g:ackprg = 'ag --column'

" JSON highlighting
Plug 'elzr/vim-json'

" Key mappings
Plug 'tpope/vim-unimpaired'

" For Ruby on Rails development
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'

let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

" Colorscheme
Plug 'w0ng/vim-hybrid'

" Colorscheme
Plug 'morhetz/gruvbox'

" Colorscheme
Plug 'sonph/onehalf', {'rtp': 'vim/'}

" Expand shorthand markup notation
Plug 'mattn/emmet-vim'

let g:user_emmet_settings = {
\  'javascript.jsx' : {
\      'extends' : 'jsx',
\  },
\}

call plug#end()

filetype plugin indent on

set number
set linespace=1
set showtabline=2
set incsearch
set ignorecase

set noswapfile

set tabstop=2

set shiftwidth=2

set expandtab

" Set up colors
set background=dark
let g:gruvbox_contrast_dark='hard'
colorscheme gruvbox

if has('gui_running')
  set background=dark
  colorscheme gruvbox
  set guifont=Monaco

  noremap <C-Tab> :tabnext<CR>
  noremap <C-S-Tab> :tabprev<CR>
  " Switch to specific tab numbers with Command-number
  noremap <D-1> :tabn 1<CR>
  noremap <D-2> :tabn 2<CR>
  noremap <D-3> :tabn 3<CR>
  noremap <D-4> :tabn 4<CR>
  noremap <D-5> :tabn 5<CR>
  noremap <D-6> :tabn 6<CR>
  noremap <D-7> :tabn 7<CR>
  noremap <D-8> :tabn 8<CR>
  noremap <D-9> :tabn 9<CR>
  " Command-0 goes to the last tab
  noremap <D-0> :tablast<CR>
endif

command NT NERDTree
command Def TernDef
command Doc TernDoc
command Type TernType
command Refs TernRefs
command Re TernRename

inoremap jk <ESC>

let mapleader = "\<Space>"
syntax on
set encoding=utf-8

nnoremap <leader>z 1z=
nnoremap <leader>s :set spell! <enter>
nnoremap <leader>l :set number! <enter>
nnoremap <leader>v :vsplit <enter>
nnoremap <leader>h :split <enter>
nnoremap <leader>q :q <enter>
nnoremap <leader>w :w <enter>
nnoremap <leader>e :e <enter>
nnoremap <leader>nr :NERDTreeFocus <enter>
nnoremap <silent><leader>f :NERDTreeFind <enter>
nnoremap <leader>n :NERDTreeToggle <enter>
nnoremap <leader>p <c-^>
nnoremap <leader>gd :Gdiff <enter>
nnoremap <leader>gs :Gstatus <enter>
nnoremap <leader>gb :Gblame <enter>
nnoremap <leader>t :term /bin/bash --rcfile /home/ubuntu/.bash_profile<enter>
nnoremap <leader>frs :term /bin/bash --rcfile /home/ubuntu/.bash_profile<enter>frs<enter>
nnoremap <leader>rs :term /bin/bash --rcfile /home/ubuntu/.bash_profile<enter>rs<enter>
nnoremap <leader>ct :term /bin/bash --rcfile /home/ubuntu/.bash_profile<enter>tc<enter>
nnoremap <leader>yl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>r :YcmCompleter GoToReferences<CR>
nnoremap <leader>ts :tselect<CR>
nnoremap <leader>d <C-]>
nnoremap <leader>td <C-W><C-]>
nnoremap <leader>b <C-t>
nnoremap <Leader>rn :%s/\<<C-r><C-w>\>/
nnoremap <leader>tb :TagbarToggle<CR>

vnoremap . :norm.<CR>

:autocmd InsertEnter,InsertLeave * set cul!

" Split switching
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>

"ctrl p to :FZF for file search
nnoremap <C-p> :FZF <Enter>

"ctrl f to search file content
nnoremap <C-f> :Ack<space>

" ctrl g to do a global search for the work under the cursor
nnoremap <C-g> :Ack <c-r>=expand("<cword>")<cr> <enter>

" Quickly navigate between ALE errors
nmap <silent> <C-a> <Plug>(ale_previous_wrap)
nmap <silent> <C-w> <Plug>(ale_next_wrap)

" Paste correct indenting
" nnoremap p ]p

" colorscheme onehalfdark
" let g:lightline.colorscheme='onehalfdark'

augroup AutoSaveFolds
  autocmd Syntax * setlocal foldmethod=syntax
  autocmd Syntax javascript,python,vim,css,html,scss normal zR
augroup END

" Make it so that a curly brace automatically inserts an indented line
inoremap {<CR> {<CR>}<Esc>O<BS><Tab>

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <leader>ch :nohl<CR><C-l>
